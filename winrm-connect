#!/usr/bin/python
import sys
import winrm
import fileinput
from base64 import b64encode
from winrm.protocol import Protocol

def print_usage():
  print sys.argv[0]+" SERVER [SCRIPT [ARG]]"

if len(sys.argv) < 2:
  print_usage()
  sys.exit(0)

if len(sys.argv) == 2:
  server = sys.argv[1]

if len(sys.argv) >= 3:
  server = sys.argv[1]
  psfile = sys.argv[2]
  arguments = ""
  for arg in sys.argv[3:]:
    arguments += arg+" "
  psscript = open(psfile, 'r').read()
  if len(sys.argv) >=4:
    psscript = 'Invoke-Command -Scriptblock { '+psscript+' } -argumentlist '+arguments
  encoded_ps = b64encode(psscript.encode('utf_16_le')).decode('ascii')
  p = Protocol(
    endpoint='https://'+server+':5986/wsman',
    transport='kerberos',
    username=None,
    password=None,
    server_cert_validation='ignore')
  shell_id = p.open_shell()
  if len(sys.argv) >=3:
    command = 'powershell -encodedcommand {0}'.format(encoded_ps)
  else:
    commnad = 'powershell -encodedcommand {0}'.format(encoded_ps)
  command_id = p.run_command(shell_id, command, '')
  std_out, std_err, status_code = p.get_command_output(shell_id, command_id)
  print std_out+std_err
  p.cleanup_command(shell_id, command_id)
  p.close_shell(shell_id)
  sys.exit(0)

if len(sys.argv) > 3:
  print_usage()
  sys.exit(0)

p = Protocol(
    endpoint='https://'+server+':5986/wsman',
    transport='kerberos',
    username=None,
    password=None,
    server_cert_validation='ignore')

console_string = "["+server+"]: CMD >"
shell_id = p.open_shell()
print "shell_id="+shell_id
## shell is either cmd or ps
current_shell = "cmd"
while True:
  runcommand = raw_input(console_string)
  runcommand.strip()
  if runcommand == 'exit':
    if current_shell == "cmd":
      break
    elif current_shell == "ps":
      current_shell = "cmd"
  elif runcommand == 'powershell' or runcommand == "ps":
    current_shell = "ps"
  else:
    if current_shell == "ps":
      runcommand = "powershell "+runcommand
    command_id = p.run_command(shell_id, runcommand, '')
    std_out, std_err, status_code = p.get_command_output(shell_id, command_id)
    print std_out+std_err
  if current_shell == "cmd":
    console_string = "["+server+"]: CMD >"
  elif current_shell == "ps":
    console_string = "["+server+"]: PS >"


p.cleanup_command(shell_id, command_id)
p.close_shell(shell_id)



